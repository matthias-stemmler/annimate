name: Release

on:
  push:
    branches:
      - main
      - hotfix/**
  workflow_call:
  workflow_dispatch:

env:
  RELEASE_CONFIG_FILE: release.json
  RUSTFLAGS: --deny warnings
  # renovate: datasource=crate depName=cargo-release
  VERSION_CARGO_RELEASE: 0.25.7
  # renovate: datasource=crate depName=parse-changelog
  VERSION_PARSE_CHANGELOG: 0.6.8

jobs:
  ci:
    name: CI
    uses: ./.github/workflows/ci.yml

  find-release:
    name: Find release
    runs-on: ubuntu-latest

    steps:
      - name: Get merged PR
        id: get-merged-pr
        uses: actions-ecosystem/action-get-merged-pull-request@v1.0.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

    outputs:
      is-release: ${{ contains(steps.get-merged-pr.outputs.labels, 'release') }}
      pr-number: ${{ steps.get-merged-pr.outputs.number }}
      release-notes: ${{ steps.get-merged-pr.outputs.body }}

  update-pending-release:
    name: Update pending release
    runs-on: ubuntu-latest
    needs: find-release
    if: needs.find-release.outputs.is-release == 'false'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine version bump
        id: determine-version-bump
        run: |
          bump=$(jq --raw-output .versionBump "$RELEASE_CONFIG_FILE")

          case "$bump" in
            none|patch) ;;

            major|minor)
              if [ "$GITHUB_REF_NAME" != 'main' ]; then
                >&2 echo "Version bump '$bump' is only allowed on main branch"
                exit 1
              fi ;;

            *)
              >&2 echo "Invalid version bump '$bump'"
              exit 1 ;;
          esac

          echo "bump=$bump" | tee --append "$GITHUB_OUTPUT"

      - name: Install stable toolchain
        if: steps.determine-version-bump.outputs.bump != 'none'
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Cache cargo-release
        id: cache-cargo-release
        if: steps.determine-version-bump.outputs.bump != 'none'
        uses: actions/cache@v4
        with:
          path: ~/.cargo/
          key: cargo-release-${{ env.VERSION_CARGO_RELEASE }}

      - name: Install cargo-release
        if: steps.determine-version-bump.outputs.bump != 'none' && !steps.cache-cargo-release.outputs.cache-hit
        run: cargo install cargo-release@${{ env.VERSION_CARGO_RELEASE }}

      - name: Cache parse-changelog
        id: cache-parse-changelog
        if: steps.determine-version-bump.outputs.bump != 'none'
        uses: actions/cache@v4
        with:
          path: ~/.cargo/
          key: parse-changelog-${{ env.VERSION_PARSE_CHANGELOG }}

      - name: Install parse-changelog
        if: steps.determine-version-bump.outputs.bump != 'none' && !steps.cache-parse-changelog.outputs.cache-hit
        run: cargo install parse-changelog@${{ env.VERSION_PARSE_CHANGELOG }}

      - name: Pre-release
        id: pre-release
        if: steps.determine-version-bump.outputs.bump != 'none'
        env:
          BUMP: ${{ steps.determine-version-bump.outputs.bump }}
        run: |
          # Reset release config file
          temp=$(mktemp)
          jq '.versionBump = "none"' "$RELEASE_CONFIG_FILE" > "$temp" && mv "$temp" "$RELEASE_CONFIG_FILE"

          # Bump version
          cargo release version "$BUMP" --execute --no-confirm

          # Apply pre-release replacements
          cargo release replace --execute --no-confirm

          # Determine new version
          version=$(cargo metadata --no-deps --format-version 1 | jq --raw-output '.packages[] | select(.name == "annimate_desktop") .version')
          echo "version=$version" | tee --append "$GITHUB_OUTPUT"

          # Determine release notes from changelog
          echo 'Release notes:'
          echo '--'
          echo 'RELEASE_NOTES<<EOF' >> "$GITHUB_OUTPUT"
          parse-changelog CHANGELOG.md "$version" | tee --append "$GITHUB_OUTPUT"
          echo 'EOF' >> "$GITHUB_OUTPUT"
          echo '--'

      - name: Create pull request
        uses: peter-evans/create-pull-request@v6
        with:
          # use PAT instead of GITHUB_TOKEN so created PR can trigger workflows
          # see https://github.com/peter-evans/create-pull-request/issues/48
          token: ${{ secrets.RELEASE_GITHUB_TOKEN }}
          branch: release/${{ github.ref_name }}
          author: Matthias Stemmler <matthias.stemmler@gmail.com>
          commit-message: "Bump version to ${{ steps.pre-release.outputs.version }}"
          delete-branch: true
          labels: release
          title: Release v${{ steps.pre-release.outputs.version }}
          body: ${{ env.RELEASE_NOTES }}

  publish-release:
    name: Publish release
    needs:
      - ci
      - find-release
    if: needs.find-release.outputs.is-release == 'true'
    concurrency: production

    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        settings:
          - os: "macos-latest" # for ARM-based Macs (M1 and above)
            args: "--target aarch64-apple-darwin"
          - os: "macos-latest" # for Intel-based Macs
            args: "--target x86_64-apple-darwin"
          - os: "ubuntu-latest"
            args: ""
          - os: "windows-latest"
            args: ""

    runs-on: ${{ matrix.settings.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Tauri dependencies (Linux only)
        if: runner.os == 'Linux'
        run: >-
          sudo apt-get update &&
          sudo apt-get install -y
          libgtk-3-dev
          libwebkit2gtk-4.0-dev

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ runner.os == 'macOS' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Set up node
        uses: actions/setup-node@v4
        with:
          cache: pnpm
          cache-dependency-path: annimate_desktop/pnpm-lock.yaml
          node-version-file: annimate_desktop/.nvmrc

      - name: Install (pnpm)
        run: pnpm install
        working-directory: annimate_desktop

      - name: Publish release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.settings.args }}
          projectPath: annimate_desktop
          releaseBody: ${{ needs.find-release.outputs.release-notes }}
          releaseName: v__VERSION__
          tagName: v__VERSION__
